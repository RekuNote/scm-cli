#!/bin/bash

cat << 'EOF'
                                                     /$$ /$$
                                                    | $$|__/
  /$$$$$$$  /$$$$$$$ /$$$$$$/$$$$           /$$$$$$$| $$ /$$
 /$$_____/ /$$_____/| $$_  $$_  $$ /$$$$$$ /$$_____/| $$| $$
|  $$$$$$ | $$      | $$ \ $$ \ $$|______/| $$      | $$| $$
 \____  $$| $$      | $$ | $$ | $$        | $$      | $$| $$
 /$$$$$$$/|  $$$$$$$| $$ | $$ | $$        |  $$$$$$$| $$| $$
|_______/  \_______/|__/ |__/ |__/         \_______/|__/|__/


by lexi/rekushi <3

EOF

# check if jq is installed
check_jq_installed() {
    if ! command -v jq &> /dev/null; then
        return 1
    else
        return 0
    fi
}

# install jq on macOS
install_jq_macos() {
    if ! command -v brew &> /dev/null; then
        echo "Homebrew is not installed. Please install Homebrew first."
        exit 1
    else
        echo "Installing jq using Homebrew..."
        brew install jq
    fi
}

# install jq on Debian-based Linux
install_jq_debian() {
    echo "Installing jq using apt-get..."
    sudo apt-get update
    sudo apt-get install -y jq
}

# install jq on Red Hat-based Linux
install_jq_redhat() {
    echo "Installing jq using dnf..."
    sudo dnf install -y jq
}

# install jq on Arch Linux
install_jq_arch() {
    echo "Installing jq using pacman..."
    sudo pacman -S jq
}

# check and install jq
check_and_install_jq() {
    check_jq_installed
    if [ $? -ne 0 ]; then
        echo "jq is not installed."
        read -p "Do you want to install jq? (yes/no): " install_jq
        if [ "$install_jq" == "yes" ]; then
            if [[ "$OSTYPE" == "darwin"* ]]; then
                install_jq_macos
            elif [[ -f /etc/debian_version ]]; then
                install_jq_debian
            elif [[ -f /etc/redhat-release ]]; then
                install_jq_redhat
            elif [[ -f /etc/arch-release ]]; then
                install_jq_arch
            else
                echo "Unsupported OS. Please install jq manually."
                exit 1
            fi
        else
            echo "jq is required for this script to run."
            exit 1
        fi
    fi
}

# check and install jq if necessary
check_and_install_jq

# base url for api
BASE_URL="https://www.smashcustommusic.net/json"

# list all games
list_games() {
    local page=0
    local per_page=20
    local next_page="N"
    local first_display=true
    while [[ "$next_page" =~ ^[NnBb]$ ]]; do
        local offset=$((page * per_page))
        local response=$(curl -s "${BASE_URL}/gamelist/")
        
        if echo "$response" | jq . > /dev/null 2>&1; then
            local game_count=$(echo "$response" | jq -r '.game_count')
            local games=$(echo "$response" | jq -r --argjson offset "$offset" --argjson per_page "$per_page" '.games | .[$offset:$offset + $per_page][] | "\(.game_id): \(.game_name) (\(.song_count) songs)"')
            
            if [ -z "$games" ]; then
                echo "No more games to display."
                break
            fi
            
            if $first_display; then
                cat << 'EOF'
                                                     /$$ /$$
                                                    | $$|__/
  /$$$$$$$  /$$$$$$$ /$$$$$$/$$$$           /$$$$$$$| $$ /$$
 /$$_____/ /$$_____/| $$_  $$_  $$ /$$$$$$ /$$_____/| $$| $$
|  $$$$$$ | $$      | $$ \ $$ \ $$|______/| $$      | $$| $$
 \____  $$| $$      | $$ | $$ | $$        | $$      | $$| $$
 /$$$$$$$/|  $$$$$$$| $$ | $$ | $$        |  $$$$$$$| $$| $$
|_______/  \_______/|__/ |__/ |__/         \_______/|__/|__/


by lexi/rekushi <3

EOF
                first_display=false
            fi

            echo "Total games available: $game_count"
            echo "Games (Page $((page + 1))):"
            echo "$games"
            
            echo
            echo "X to Exit"
            echo "N to show Next Entries"
            echo "B to show Previous Entries"
            echo

            read -n 1 -s next_page_key
            echo

            case "$next_page_key" in
                [Nn])
                    next_page="N"
                    ;;
                [Bb])
                    next_page="B"
                    ;;
                [Xx])
                    exit 0
                    ;;
            esac

            if [[ "$next_page" =~ ^[Bb]$ ]]; then
                if [ $page -gt 0 ]; then
                    page=$((page - 1))
                fi
            elif [[ "$next_page" =~ ^[Nn]$ ]]; then
                page=$((page + 1))
            fi
        else
            echo "Error: Invalid JSON response."
            exit 1
        fi
    done
}

# search for songs by game id
search_songs() {
    local game_id=$1
    local response=$(curl -s "${BASE_URL}/game/$game_id")
    
    if echo "$response" | jq . > /dev/null 2>&1; then
        local game_name=$(echo "$response" | jq -r '.game_name')
        echo "Game: $game_name"
        local songs=$(echo "$response" | jq -r '.songs[] | "\(.song_id): \(.song_name) (\(.song_length) seconds)"')
        echo "Songs:"
        echo "$songs"
    else
        echo "Error: Invalid JSON response."
        exit 1
    fi
}

# download a brstm with song id
download_brstm() {
    local song_id=$1
    local output_path=$2
    
    if [ -z "$output_path" ];then
        output_path="$PWD/brstm"
        mkdir -p "$output_path"
    fi
    
    local response=$(curl -s "${BASE_URL}/song/$song_id")
    
    if echo "$response" | jq . > /dev/null 2>&1; then
        local song_name=$(echo "$response" | jq -r '.name')
        
        local brstm_url="https://www.smashcustommusic.net/brstm/$song_id.brstm"
        
        local output_file="$output_path/${song_name// /_}.brstm"
        curl -o "$output_file" "$brstm_url"
        
        if [ $? -eq 0 ]; then
            echo "Downloaded to: $output_file"
        else
            echo "Error: Failed to download BRSTM file."
        fi
    else
        echo "Error: Invalid JSON response."
        exit 1
    fi
}

# download a file with song id and format
download_file() {
    local song_id=$1
    local download_format=$2

    case $download_format in
        brstm)
            output_path="$PWD/brstm"
            ;;
        bcstm)
            output_path="$PWD/bcstm"
            ;;
        bfstm_wiiu)
            output_path="$PWD/bfstm/wiiu"
            ;;
        bfstm_switch)
            output_path="$PWD/bfstm/switch"
            ;;
        bwav)
            output_path="$PWD/bwav"
            ;;
        nus3audio)
            output_path="$PWD/nus3audio"
            ;;
        *)
            echo "Invalid format"; exit 1 ;;
    esac

    mkdir -p "$output_path"

    local response=$(curl -s "${BASE_URL}/song/$song_id")

    if echo "$response" | jq . > /dev/null 2>&1; then
        local song_name=$(echo "$response" | jq -r '.name')
        local download_url="https://www.smashcustommusic.net/$download_format/$song_id.$download_format"
        local output_file="$output_path/${song_name// /_}.$download_format"
        curl -o "$output_file" "$download_url"

        if [ $? -eq 0 ]; then
            echo "Downloaded to: $output_file"
        else
            echo "Error: Failed to download file."
        fi
    else
        echo "Error: Invalid JSON response."
        exit 1
    fi
}

# update the script
update_script() {
    local current_script=$(realpath "$0")
    local remote_script=$(curl -s https://raw.githubusercontent.com/RekuNote/scm-cli/main/scm-cli)

    if diff <(cat "$current_script") <(echo "$remote_script") > /dev/null; then
        echo "You are already running the latest version of scm-cli."
    else
        curl -sL https://raw.githubusercontent.com/RekuNote/scm-cli/main/install.sh | bash
    fi
}

# show track info
show_track_info() {
    local song_id=$1
    local response=$(curl -s "${BASE_URL}/song/$song_id")

    if echo "$response" | jq . > /dev/null 2>&1; then
        local song_name=$(echo "$response" | jq -r '.name')
        local description=$(echo "$response" | jq -r '.description')
        local game_name=$(echo "$response" | jq -r '.game_name')
        local theme_type=$(echo "$response" | jq -r '.theme_type')
        local uploader=$(echo "$response" | jq -r '.uploader')
        local length=$(echo "$response" | jq -r '.length')
        local size=$(echo "$response" | jq -r '.size')
        local downloads=$(echo "$response" | jq -r '.downloads')
        local loop_type=$(echo "$response" | jq -r '.loop_type')
        local start_loop_point=$(echo "$response" | jq -r '.start_loop_point')
        local end_loop_point=$(echo "$response" | jq -r '.end_loop_point')
        local sample_rate=$(echo "$response" | jq -r '.sample_rate')

        local length_minutes=$((length / 60))
        local length_seconds=$((length % 60))
        local size_mb=$(awk "BEGIN {printf \"%.2f\", $size/1048576}")

        cat <<EOF
Song Name: $song_name
$description

Game: $game_name
Song Type: $theme_type
Song ID: $song_id
Uploaded By: $uploader
Length: ${length_minutes}m ${length_seconds}s
BRSTM Size: ${size_mb}MB
Downloads: $downloads
Loop Type: $loop_type
Start Loop Point: $start_loop_point
End Loop Point: $end_loop_point
Sample Rate: $sample_rate

D for Download Options
X to Exit
EOF

        read -n 1 -s user_input
        echo

        if [[ "$user_input" =~ ^[Dd]$ ]]; then
            cat <<EOF
Download Options:
1 to download BRSTM
2 to download BCSTM
3 to download BFSTM (Wii U)
4 to download BFSTM (Switch)
5 to download BWAV
6 to download NUS3Audio
X to Exit
EOF

            read -n 1 -s download_option
            echo

            case "$download_option" in
                1) download_format="brstm" ;;
                2) download_format="bcstm" ;;
                3) download_format="bfstm_wiiu" ;;
                4) download_format="bfstm_switch" ;;
                5) download_format="bwav" ;;
                6) download_format="nus3audio" ;;
                [Xx]) exit 0 ;;
                *) echo "Invalid option"; exit 1 ;;
            esac

            download_file "$song_id" "$download_format"
        fi
    else
        echo "Error: Invalid JSON response."
        exit 1
    fi
}

# stuff
if [ $# -eq 0 ]; then
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo "  -l, --list                 List all games"
    echo "  -g, --game <game_id>       Search songs by game ID"
    echo "  -d, --download <song_id>   Download BRSTM file by song ID"
    echo "  -o, --output <path>        Specify output path for downloads"
    echo "  -u, --update               Update the script"
    echo "  -t, --trackinfo <song_id>  Show track info"
    exit 1
fi

output_path=""
song_id=""

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -l|--list)
        list_games
        shift # past argument
        ;;
        -g|--game)
        search_songs "$2"
        shift # past argument
        shift # past value
        ;;
        -d|--download)
        song_id="$2"
        shift # past argument
        shift # past value
        ;;
        -o|--output)
        output_path="$2"
        shift # past argument
        shift # past value
        ;;
        -u|--update)
        update_script
        shift # past argument
        ;;
        -t|--trackinfo)
        show_track_info "$2"
        shift # past argument
        shift # past value
        ;;
        *)
        echo "Unknown option: $key"
        exit 1
        ;;
    esac
done

if [ ! -z "$song_id" ]; then
    download_brstm "$song_id" "$output_path"
fi
