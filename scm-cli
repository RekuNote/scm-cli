#!/bin/bash

# Set the window title
echo -ne "\033]0;Smash Custom Music Archive\007"

ascii_art=$(cat << 'EOF'
                                                     /$$ /$$
                                                    | $$|__/
  /$$$$$$$  /$$$$$$$ /$$$$$$/$$$$           /$$$$$$$| $$ /$$
 /$$_____/ /$$_____/| $$_  $$_  $$ /$$$$$$ /$$_____/| $$| $$
|  $$$$$$ | $$      | $$ \ $$ \ $$|______/| $$      | $$| $$
 \____  $$| $$      | $$ | $$ | $$        | $$      | $$| $$
 /$$$$$$$/|  $$$$$$$| $$ | $$ | $$        |  $$$$$$$| $$| $$
|_______/  \_______/|__/ |__/ |__/         \_______/|__/|__/


------------------------------------------------------------

EOF
)

# clear terminal and print ascii art with line break
clear_and_print_art() {
    clear
    echo "$ascii_art"
    echo ""
}

# check if jq and pv are installed
check_dependencies_installed() {
    local missing_dependencies=()
    if ! command -v jq &> /dev/null; then
        missing_dependencies+=("jq")
    fi
    if ! command -v pv &> /dev/null; then
        missing_dependencies+=("pv")
    fi

    if [ ${#missing_dependencies[@]} -gt 0 ]; then
        echo "The following dependencies are missing: ${missing_dependencies[@]}"
        return 1
    else
        return 0
    fi
}

# install jq on macOS
install_jq_macos() {
    if ! command -v brew &> /dev/null; then
        echo "Homebrew is not installed. Please install Homebrew first."
        exit 1
    else
        echo "Installing jq using Homebrew..."
        brew install jq
    fi
}

# install pv on macOS
install_pv_macos() {
    if ! command -v brew &> /dev/null; then
        echo "Homebrew is not installed. Please install Homebrew first."
        exit 1
    else
        echo "Installing pv using Homebrew..."
        brew install pv
    fi
}

# install jq on Debian-based Linux
install_jq_debian() {
    echo "Installing jq using apt-get..."
    sudo apt-get update
    sudo apt-get install -y jq
}

# install pv on Debian-based Linux
install_pv_debian() {
    echo "Installing pv using apt-get..."
    sudo apt-get update
    sudo apt-get install -y pv
}

# install jq on Red Hat-based Linux
install_jq_redhat() {
    echo "Installing jq using dnf..."
    sudo dnf install -y jq
}

# install pv on Red Hat-based Linux
install_pv_redhat() {
    echo "Installing pv using dnf..."
    sudo dnf install -y pv
}

# install jq on Arch Linux
install_jq_arch() {
    echo "Installing jq using pacman..."
    sudo pacman -S jq
}

# install pv on Arch Linux
install_pv_arch() {
    echo "Installing pv using pacman..."
    sudo pacman -S pv
}

# check and install dependencies
check_and_install_dependencies() {
    check_dependencies_installed
    local result=$?
    if [ $result -ne 0 ]; then
        local install_dependencies=("jq" "pv")
        for dependency in "${install_dependencies[@]}"; do
            if ! command -v $dependency &> /dev/null; then
                echo "$dependency is not installed."
                read -p "Do you want to install $dependency? (yes/no): " install_dep
                if [ "$install_dep" == "yes" ]; then
                    if [[ "$OSTYPE" == "darwin"* ]]; then
                        if [ "$dependency" == "jq" ]; then
                            install_jq_macos
                        elif [ "$dependency" == "pv" ]; then
                            install_pv_macos
                        fi
                    elif [[ -f /etc/debian_version ]]; then
                        if [ "$dependency" == "jq" ]; then
                            install_jq_debian
                        elif [ "$dependency" == "pv" ]; then
                            install_pv_debian
                        fi
                    elif [[ -f /etc/redhat-release ]]; then
                        if [ "$dependency" == "jq" ]; then
                            install_jq_redhat
                        elif [ "$dependency" == "pv" ]; then
                            install_pv_redhat
                        fi
                    elif [[ -f /etc/arch-release ]]; then
                        if [ "$dependency" == "jq" ]; then
                            install_jq_arch
                        elif [ "$dependency" == "pv" ]; then
                            install_pv_arch
                        fi
                    else
                        echo "Unsupported OS. Please install $dependency manually."
                        exit 1
                    fi
                else
                    echo "$dependency is required for this script to run."
                    exit 1
                fi
            fi
        done
    fi
}

# check and install dependencies if necessary
check_and_install_dependencies

# base url for api
BASE_URL="https://www.smashcustommusic.net/json"

# list all games
list_games() {
    local page=0
    local per_page=20
    local next_page="N"
    local first_display=true
    local total_pages=0
    local game_list

    while [[ "$next_page" =~ ^[NnBbGgUuXxSs]$ ]]; do
        local offset=$((page * per_page))
        local response=$(curl -s "${BASE_URL}/gamelist/")
        
        if echo "$response" | jq . > /dev/null 2>&1; then
            local game_count=$(echo "$response" | jq -r '.game_count')
            total_pages=$(( (game_count + per_page - 1) / per_page ))  # Calculate total pages
            game_list=$(echo "$response" | jq -r '.games | .[] | "\(.game_id): \(.game_name) (\(.song_count) songs)"')
            local games=$(echo "$response" | jq -r --argjson offset "$offset" --argjson per_page "$per_page" '.games | .[$offset:$offset + $per_page][] | "\(.game_id): \(.game_name) (\(.song_count) songs)"')
            
            if [ -z "$games" ]; then
                echo "No more games to display."
                break
            fi
            
            clear_and_print_art

            echo "Total games available: $game_count"
            echo ""
            echo "Games (Page $((page + 1)) of $total_pages):"
            echo ""
            echo "$games"
            
            echo
            echo "X to Exit"
            echo "N to show Next Entries"
            echo "B to show Previous Entries"
            echo "G to Select Game"
            echo "S to Search Game"
            echo "U to Check for Updates"
            echo

            read -n 1 -s next_page_key
            echo

            case "$next_page_key" in
                [Nn])
                    if (( page + 1 < total_pages )); then  # Ensure we don't go beyond the last page
                        next_page="N"
                        page=$((page + 1))
                    fi
                    ;;
                [Bb])
                    if (( page > 0 )); then  # Ensure we don't go before the first page
                        next_page="B"
                        page=$((page - 1))
                    fi
                    ;;
                [Gg])
                    read -p "Insert Game ID, or leave blank to cancel: " game_id
                    if [ -n "$game_id" ]; then
                        search_songs "$game_id"
                    fi
                    ;;
                [Ss])
                    clear_and_print_art
                    echo "Indexing, this may take a moment..."
                    game_list=$(curl -s "${BASE_URL}/gamelist/" | jq -r '.games | .[] | "\(.game_id): \(.game_name) (\(.song_count) songs)"' | pv -p -s $(curl -s "${BASE_URL}/gamelist/" | jq -r '.games | length'))
                    clear_and_print_art
                    echo "Type the name of the game you would like to search for, or leave empty to cancel:"
                    read search_term
                    if [ -n "$search_term" ]; then
                        local search_results=$(echo "$game_list" | grep -i "$search_term")
                        if [ -z "$search_results" ]; then
                            clear_and_print_art
                            echo "No search results found for your query. Press any key to return."
                            read -n 1 -s
                            list_games
                            return
                        fi
                        local search_count=$(echo "$search_results" | wc -l | xargs)  # Remove leading spaces
                        local search_page=0
                        local search_total_pages=$(( (search_count + per_page - 1) / per_page ))
                        while [ -n "$search_results" ]; do
                            local search_offset=$((search_page * per_page))
                            local search_page_results=$(echo "$search_results" | sed -n "$((search_offset + 1)),$((search_offset + per_page))p")
                            clear_and_print_art
                            echo "$search_count results for \"$search_term\":"
                            echo ""
                            echo "Results (Page $((search_page + 1)) of $search_total_pages):"
                            echo ""
                            echo "$search_page_results"
                            echo
                            echo "X to Exit"
                            echo "R to Return"
                            echo "N to show Next Entries"
                            echo "B to show Previous Entries"
                            echo "G to Select Game"
                            echo

                            read -n 1 -s search_page_key
                            echo

                            case "$search_page_key" in
                                [Nn])
                                    if (( search_page + 1 < search_total_pages )); then
                                        search_page=$((search_page + 1))
                                    fi
                                    ;;
                                [Bb])
                                    if (( search_page > 0 )); then
                                        search_page=$((search_page - 1))
                                    fi
                                    ;;
                                [Gg])
                                    read -p "Insert Game ID, or leave blank to return to the game list: " game_id
                                    if [ -n "$game_id" ]; then
                                        search_songs "$game_id"
                                        break
                                    fi
                                    ;;
                                [Rr])
                                    list_games
                                    return
                                    ;;
                                [Xx])
                                    exit 0
                                    ;;
                                *)
                                    echo "Invalid option. Please try again."
                                    ;;
                            esac
                        done
                    fi
                    ;;
                [Uu])
                    check_for_updates
                    ;;
                [Xx])
                    exit 0
                    ;;
                *)
                    echo "Invalid option. Please try again."
                    ;;
            esac
        else
            echo "Error: Invalid JSON response."
            exit 1
        fi
    done
}

# search for songs by game id
search_songs() {
    local game_id=$1
    local page=0
    local per_page=20
    local next_page="N"
    local total_pages=0
    local song_list

    while [[ "$next_page" =~ ^[NnBbSsXxRr]$ ]]; do
        local offset=$((page * per_page))
        local response=$(curl -s "${BASE_URL}/game/$game_id")
        
        if echo "$response" | jq . > /dev/null 2>&1; then
            local game_name=$(echo "$response" | jq -r '.game_name')
            local songs=$(echo "$response" | jq -r --argjson offset "$offset" --argjson per_page "$per_page" '.songs | .[$offset:$offset + $per_page][] | "\(.song_id): \(.song_name) (\(.song_length) seconds)"')
            song_list=$(echo "$response" | jq -r '.songs | .[] | "\(.song_id): \(.song_name) (\(.song_length) seconds)"')
            local song_count=$(echo "$response" | jq -r '.songs | length')
            total_pages=$(( (song_count + per_page - 1) / per_page ))  # Calculate total pages
            
            clear_and_print_art
            
            echo "Game: $game_name"
            echo ""
            echo "Songs (Page $((page + 1)) of $total_pages):"
            echo ""
            echo "$songs"
            
            echo
            echo "X to Exit"
            echo "R to Return"
            echo "N to Show Next Entries"
            echo "B to Show Previous Entries"
            echo "S to Select Song"
            echo

            read -n 1 -s next_page_key
            echo

            case "$next_page_key" in
                [Nn])
                    if (( page + 1 < total_pages )); then  # Ensure we don't go beyond the last page
                        next_page="N"
                        page=$((page + 1))
                    fi
                    ;;
                [Bb])
                    if (( page > 0 )); then  # Ensure we don't go before the first page
                        next_page="B"
                        page=$((page - 1))
                    fi
                    ;;
                [Ss])
                    read -p "Insert Song ID, or leave blank to cancel: " song_id
                    if [ -n "$song_id" ]; then
                        show_track_info "$song_id"
                    fi
                    ;;
                [Rr])
                    list_games
                    ;;
                [Xx])
                    exit 0
                    ;;
                *)
                    echo "Invalid option. Please try again."
                    ;;
            esac
        else
            echo "Error: Invalid JSON response."
            exit 1
        fi
    done
}

# show track info
show_track_info() {
    local song_id=$1
    local response=$(curl -s "${BASE_URL}/song/$song_id")

    if echo "$response" | jq . > /dev/null 2>&1; then
        local song_name=$(echo "$response" | jq -r '.name')
        local description=$(echo "$response" | jq -r '.description')
        local game_name=$(echo "$response" | jq -r '.game_name')
        local theme_type=$(echo "$response" | jq -r '.theme_type')
        local uploader=$(echo "$response" | jq -r '.uploader')
        local length=$(echo "$response" | jq -r '.length')
        local size=$(echo "$response" | jq -r '.size')
        local downloads=$(echo "$response" | jq -r '.downloads')
        local loop_type=$(echo "$response" | jq -r '.loop_type')
        local start_loop_point=$(echo "$response" | jq -r '.start_loop_point')
        local end_loop_point=$(echo "$response" | jq -r '.end_loop_point')
        local sample_rate=$(echo "$response" | jq -r '.sample_rate')

        local length_minutes=$((length / 60))
        local length_seconds=$((length % 60))
        local size_mb=$(awk "BEGIN {printf \"%.2f\", $size/1048576}")

        clear_and_print_art

        cat <<EOF

Song Name: $song_name
$description

Game: $game_name
Song Type: $theme_type
Song ID: $song_id
Uploaded By: $uploader
Length: ${length_minutes}m ${length_seconds}s
BRSTM Size: ${size_mb}MB
Downloads: $downloads
Loop Type: $loop_type
Start Loop Point: $start_loop_point
End Loop Point: $end_loop_point
Sample Rate: $sample_rate

X to Exit
R to Return
D for Download Options
EOF

        read -n 1 -s user_input
        echo

        if [[ "$user_input" =~ ^[Dd]$ ]]; then
            clear_and_print_art
            cat <<EOF
Download Options:

1 to Download BRSTM
2 to Download BCSTM
3 to Download BFSTM (Wii U)
4 to Download BFSTM (Switch)
5 to Download BWAV
6 to Download NUS3Audio
R to Return
X to Exit
EOF

            read -n 1 -s download_option
            echo

            case "$download_option" in
                1) download_format="brstm" ;;
                2) download_format="bcstm" ;;
                3) download_format="bfstm" ;;
                4) download_format="sw_bfstm" ;;
                5) download_format="bwav" ;;
                6) download_format="nus3audio" ;;
                [Rr]) return ;;
                [Xx]) exit 0 ;;
                *) echo "Invalid option"; exit 1 ;;
            esac

            read -p "Please specify a path to download your file (if left empty, file will be downloaded to your desktop): " output_path

            if [ -z "$output_path" ]; then
                if [[ "$OSTYPE" == "darwin"* ]]; then
                    desktop_path="$HOME/Desktop"
                elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
                    desktop_path="$HOME/Desktop"
                else
                    echo "Unsupported OS. Please specify a path."
                    return
                fi

                case $download_format in
                    brstm)
                        output_path="$desktop_path/brstm"
                        ;;
                    bcstm)
                        output_path="$desktop_path/bcstm"
                        ;;
                    bfstm)
                        output_path="$desktop_path/bfstm/wiiu"
                        ;;
                    sw_bfstm)
                        output_path="$desktop_path/bfstm/switch"
                        ;;
                    bwav)
                        output_path="$desktop_path/bwav"
                        ;;
                    nus3audio)
                        output_path="$desktop_path/nus3audio"
                        ;;
                    *)
                        echo "Invalid format"; exit 1 ;;
                esac
            fi

            download_file "$song_id" "$download_format" "$output_path"
        elif [[ "$user_input" =~ ^[Rr]$ ]]; then
            search_songs "$game_id"
        elif [[ "$user_input" =~ ^[Xx]$ ]]; then
            exit 0
        fi
    else
        echo "Error: Invalid JSON response."
        exit 1
    fi
}

# download a file with song id and format
download_file() {
    local song_id=$1
    local download_format=$2
    local output_path=$3

    mkdir -p "$output_path"

    local response=$(curl -s "${BASE_URL}/song/$song_id")

    if echo "$response" | jq . > /dev/null 2>&1; then
        local song_name=$(echo "$response" | jq -r '.name')
        local download_url="https://www.smashcustommusic.net/$download_format/$song_id.$download_format"
        local output_file="$output_path/${song_name// /_}.$download_format"

        # Download with progress bar
        curl -L "$download_url" -o "$output_file" --user-agent "scm-py/0.1" --progress-bar

        if [ $? -eq 0 ]; then
            # Rename .sw_bfstm files to .bfstm in /switch directory
            if [[ "$download_format" == "sw_bfstm" ]]; then
                mv "$output_file" "$output_path/${song_name// /_}.bfstm"
                output_file="$output_path/${song_name// /_}.bfstm"
            fi
            echo "File downloaded successfully to $output_file. Press any key to return."
            read -n 1 -s
            show_track_info "$song_id"
        else
            echo "Error: Failed to download file."
        fi
    else
        echo "Error: Invalid JSON response."
        exit 1
    fi
}

# update the script
update_script() {
    local current_script=$(realpath "$0")
    local remote_script=$(curl -s https://raw.githubusercontent.com/RekuNote/scm-cli/main/scm-cli)

    if cmp -s "$current_script" <(echo "$remote_script"); then
        echo "You are already running the latest version of scm-cli."
        sleep 2  # Pause for 2 seconds before proceeding
        echo
    else
        curl -sL https://raw.githubusercontent.com/RekuNote/scm-cli/main/install.sh | bash
    fi
}

# check for updates
check_for_updates() {
    if [[ "$(realpath "$0")" != "$(which scm-cli 2>/dev/null)" ]]; then
        echo "You are running scm-cli portably. You cannot update while running portably."
        sleep 2  # Pause for 2 seconds before proceeding
        return
    fi
    
    clear_and_print_art
    echo "Would you like to check for updates? Y/N"
    read -n 1 -s update_choice
    echo
    if [[ "$update_choice" =~ ^[Yy]$ ]]; then
        local current_script=$(realpath "$0")
        local remote_script=$(curl -s https://raw.githubusercontent.com/RekuNote/scm-cli/main/scm-cli)
        if cmp -s "$current_script" <(echo "$remote_script"); then
            echo "You are already running the latest version of scm-cli."
            sleep 2  # Pause for 2 seconds before proceeding
            echo
        else
            echo "Update found. Would you like to update now? Y/N"
            read -n 1 -s confirm_update
            echo
            if [[ "$confirm_update" =~ ^[Yy]$ ]]; then
                curl -sL https://raw.githubusercontent.com/RekuNote/scm-cli/main/install.sh | bash
                exit 0  # Exit after updating
            else
                echo "Update aborted."
            fi
        fi
    else
        echo "Update aborted."
    fi
    list_games
}

# check for updates without clearing or ascii art
check_for_updates_no_clear() {
    if [[ "$(realpath "$0")" != "$(which scm-cli 2>/dev/null)" ]]; then
        echo "You are running scm-cli portably. You cannot update while running portably."
        sleep 2  # Pause for 2 seconds before proceeding
        return
    fi
    
    echo "Would you like to check for updates? Y/N"
    read -n 1 -s update_choice
    echo
    if [[ "$update_choice" =~ ^[Yy]$ ]]; then
        local current_script=$(realpath "$0")
        local remote_script=$(curl -s https://raw.githubusercontent.com/RekuNote/scm-cli/main/scm-cli)
        if cmp -s "$current_script" <(echo "$remote_script"); then
            echo "You are already running the latest version of scm-cli."
            sleep 2  # Pause for 2 seconds before proceeding
            echo
        else
            echo "Update found. Would you like to update now? Y/N"
            read -n 1 -s confirm_update
            echo
            if [[ "$confirm_update" =~ ^[Yy]$ ]]; then
                curl -sL https://raw.githubusercontent.com/RekuNote/scm-cli/main/install.sh | bash
            else
                echo "Update aborted."
            fi
        fi
    else
        echo "Update aborted."
        exit 0
    fi
    exit 0
}

# main script logic
if [ $# -eq 0 ]; then
    list_games
else
    case $1 in
        -u|--update)
            check_for_updates_no_clear
            ;;
        *)
            echo "Invalid option. Please run the script without any arguments or use -u/--update to update."
            exit 1
            ;;
    esac
fi
